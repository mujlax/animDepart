// macOS.js
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const tinify = require('tinify');
const uglifyJS = require('uglify-js');
const logCompressionToSheet = require('../src/scripts/statistic/logCompressionToSheet.js');

tinify.key = 'JvbcxzKlLyGscgvDrcSdpJxs5knj0r4n'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á –æ—Ç TinyPNG

/**
 * –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –≤ Finder –Ω–∞ macOS.
 * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
 */
function archiveSelectedItems(callback) {
    const appleScript = `
        tell application "Finder"
            set selectedItems to selection
        end tell

        set archivedCount to 0

        repeat with anItem in selectedItems
            set itemPath to POSIX path of (anItem as alias)
            set itemName to name of anItem
            set archivePath to POSIX path of (itemPath & "/../" & itemName & ".zip")
            do shell script "cd " & quoted form of itemPath & " && zip -r " & quoted form of archivePath & " . -x '*.DS_Store' -x '*.fla'"
            set archivedCount to archivedCount + 1
        end repeat

        return archivedCount
    `;

    exec(`osascript -e '${appleScript}'`, (error, stdout, stderr) => {
        if (error) {
            console.error(`–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
            //logMessage('error', `–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'üóÇÔ∏è');
            callback('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –∏–∑ stdout
        const archivedFoldersCount = parseInt(stdout.trim(), 10) || 0;

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Google Sheets
        logCompressionToSheet(archivedFoldersCount, "–ê—Ä—Ö–∏–≤–∞—Ü–∏—è");
        // logMessage('success', `–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–∞–ø–æ–∫: ${archivedFoldersCount}`, 'üóÇÔ∏è');
        callback(`–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–∞–ø–æ–∫: ${archivedFoldersCount}`);
    });
}

/**
 * –ò—â–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª–∞—Ö, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ Finder.
 * @param {string} searchString - —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
 * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
 */
function searchInFiles(searchString, callback) {
    const appleScript = `
        tell application "Finder"
            set selectedItems to selection
            if (count of selectedItems) is 0 then
                display dialog "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ Finder." buttons {"OK"} default button 1
                return
            end if
            set filePaths to {}
            repeat with theItem in selectedItems
                try
                    set theFilePath to POSIX path of (theItem as alias)
                    set theFilePath to theFilePath & ","
                    copy theFilePath to the end of filePaths
                end try
            end repeat
            return filePaths as string
        end tell
    `;

    exec(`osascript -e '${appleScript}'`, (error, stdout, stderr) => {
        if (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º: ${error.message}`);
            callback('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º');
            return;
        }

        const filePaths = stdout.trim().split(",").filter(Boolean);
        if (filePaths.length === 0) {
            callback('–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–ª–∏ –ø—É—Ç–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã');
            return;
        }

        let filesWithMatch = [];
        let filesWithoutMatch = [];
        let filesProcessed = 0;
        const errors = [];

        filePaths.forEach((filePath) => {
            fs.readFile(filePath, 'utf8', (readError, data) => {
                if (readError) {
                    errors.push(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}`);
                } else if (data.includes(searchString)) {
                    filesWithMatch.push(filePath);
                } else {
                    filesWithoutMatch.push(filePath);
                }

                filesProcessed++;
                if (filesProcessed === filePaths.length) {
                    callback(
                        filesWithMatch.length > 0
                            ? `–°—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–∞—Ö: \r\n ${filesWithMatch.join(', \r\n')} \r\n \r\n –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–∞—Ö: \r\n ${filesWithoutMatch.join(', \r\n')}`
                            : '–°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–∞–π–ª–æ–≤',
                        errors
                    );
                }
            });
        });
    });


}

/**
 * –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤ Finder.
 * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
 */
function compressImages(callback) {
    const appleScript = `
        tell application "Finder"
            set selectedItems to selection
            if (count of selectedItems) is 0 then
                display dialog "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø–∞–ø–∫–∏ –≤ Finder." buttons {"OK"} default button 1
                return
            end if
            set filePaths to {}
            repeat with theItem in selectedItems
                try
                    set theFilePath to POSIX path of (theItem as alias)
                    set theFilePath to theFilePath & ","
                    copy theFilePath to the end of filePaths
                end try
            end repeat
            return filePaths as string
        end tell

        
    `;

    exec(`osascript -e '${appleScript}'`, (error, stdout, stderr) => {
        if (error) {
            //logMessage('error', `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º`, 'üñºÔ∏è');
            callback('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º');
            return;
        }

        const selectedPaths = stdout.trim().split(",").filter(Boolean);
        if (selectedPaths.length === 0) {
            //logMessage('error', `–§–∞–π–ª—ã –∏–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–ª–∏ –ø—É—Ç–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã`, 'üñºÔ∏è');
            callback('–§–∞–π–ª—ã –∏–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–ª–∏ –ø—É—Ç–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã');
            return;
        }
        const getImagesFromFolder = (folderPath) => {
            let images = [];
            const items = fs.readdirSync(folderPath);
            items.forEach((item) => {
                const itemPath = path.join(folderPath, item);
                const stats = fs.statSync(itemPath);
                if (stats.isDirectory()) {
                    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
                    images = images.concat(getImagesFromFolder(itemPath));
                } else if (stats.isFile() && /\.(jpe?g|png|gif)$/i.test(item)) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (JPEG, PNG, GIF)
                    images.push(itemPath);
                }
            });
            return images;
        };

        let imagePaths = [];
        selectedPaths.forEach((filePath) => {
            const stats = fs.statSync(filePath);
            if (stats.isDirectory()) {
                imagePaths = imagePaths.concat(getImagesFromFolder(filePath));
            } else if (stats.isFile() && /\.(jpe?g|png|gif)$/i.test(filePath)) {
                imagePaths.push(filePath);
            }
        });

        if (imagePaths.length === 0) {
           // logMessage('error', `–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∂–∞—Ç–∏—è`, 'üñºÔ∏è');
            callback('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∂–∞—Ç–∏—è');
            return;
        }

        let compressedCount = 0;
        const errors = [];
        const res = [];

        imagePaths.forEach((imagePath) => {
            const outputPath = imagePath.replace(/(\.\w+)$/, '$1');
            console.log("path " + imagePath);
            tinify.fromFile(imagePath).toFile(outputPath, (compressError) => {
                if (compressError) {
                    errors.push(`–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è ${imagePath}`);
                }
                compressedCount++;
                if (compressedCount === imagePaths.length) {
                    res.push(tinify.compressionCount);
                    res.push(errors.length === 0 ? `–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–∂–∞—Ç—ã (${compressedCount})` : `–°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏: ${errors.join('; ')}`)
                    
                    callback(res);
                    logCompressionToSheet(compressedCount, "–°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
                }
            });
            //logMessage('success', `–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–∂–∞—Ç–∞ ${getLastTwoDirectories(imagePath)}`, 'üñºÔ∏è');
        });
    });
}

/**
 * –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ JS —Ñ–∞–π–ª—ã –≤ Finder.
 * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
 */
function minifyJSFiles(callback) {
    const appleScript = `
        tell application "Finder"
            set selectedItems to selection
            if (count of selectedItems) is 0 then
                display dialog "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã .js –≤ Finder." buttons {"OK"} default button 1
                return
            end if
            set filePaths to {}
            repeat with theItem in selectedItems
                try
                    set theFilePath to POSIX path of (theItem as alias)
                    set theFilePath to theFilePath & ","
                    copy theFilePath to the end of filePaths
                end try
            end repeat
            return filePaths as string
        end tell
    `;

    // –ó–∞–ø—É—Å–∫–∞–µ–º AppleScript –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
    exec(`osascript -e '${appleScript}'`, (error, stdout, stderr) => {
        if (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º: ${error.message}`);
            callback('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º');
            return;
        }

        const filePaths = stdout.trim().split(",").filter(Boolean);
        if (filePaths.length === 0) {
            callback('–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–ª–∏ –ø—É—Ç–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã');
            return;
        }

        let minifiedFiles = [];
        const errors = [];

        filePaths.forEach((filePath) => {
            try {
                // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JS —Ñ–∞–π–ª–∞
                const code = fs.readFileSync(filePath, 'utf8');

                // –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–¥
                const result = uglifyJS.minify(code);
                if (result.error) throw result.error;

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ —Ñ–∞–π–ª —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º ".min.js"
                const minFilePath = filePath.replace(/\.js$/, '.js');
                fs.writeFileSync(minFilePath, result.code, 'utf8');

                minifiedFiles.push(minFilePath);
            } catch (err) {
                console.error(`–û—à–∏–±–∫–∞ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}: ${err.message}`);
                errors.push(`–û—à–∏–±–∫–∞ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}`);
            }
        });

        if (errors.length > 0) {
            callback(`–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏: ${errors.join('; ')}`);
        } else {
            logCompressionToSheet(minifiedFiles.length, "–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è");
            callback(`–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\r\n ${minifiedFiles.join(', \r\n')}`);
        }

    });
}

/**
 * –ó–∞–º–µ–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ index.html –Ω–∞ Base64-—Å—Ç—Ä–æ–∫–∏–∏–∏.
 * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
 */
function replaceImagesWithBase64(callback) {
    // AppleScript –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ Finder
    const appleScript = `
    tell application "Finder"
    set selectedItems to selection
    if (count of selectedItems) is 0 then
        display dialog "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø–∞–ø–∫–∏ –≤ Finder." buttons {"OK"} default button 1
        return
    end if
    set filePaths to {}
    repeat with theItem in selectedItems
        try
            set theFilePath to POSIX path of (theItem as alias)
            set theFilePath to theFilePath & ","
            copy theFilePath to the end of filePaths
        end try
    end repeat
    return filePaths as string
end tell
    `;

    exec(`osascript -e '${appleScript}'`, (error, stdout) => {
        if (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫:", error);
            callback("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫");
            return;
        }

        // –†–∞–∑–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
        const folderPaths = stdout.trim().split(",").map(p => p.trim());

        if (folderPaths.length === 0) {
            callback("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
            return;
        }

        let processedCount = 0;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
        folderPaths.forEach(folderPath => {
            const htmlFilePath = path.join(folderPath, 'index.html');
            const imageFiles = [
                { fileName: 'index_atlas_NP_1.jpg', id: 'index_atlas_NP_1' },
                { fileName: 'index_atlas_P_1.png', id: 'index_atlas_P_1' }
            ];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è index.html
            if (!fs.existsSync(htmlFilePath)) {
                console.warn(`–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ ${folderPath}`);
                processedCount++;
                if (processedCount === folderPaths.length) {
                    callback("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ –≤—Å–µ –ø–∞–ø–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ñ–∞–π–ª index.html.");
                }
                return;
            }

            // –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ index.html
            let htmlContent = fs.readFileSync(htmlFilePath, 'utf8');

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            imageFiles.forEach(image => {
                const imagePath = path.join(folderPath, image.fileName);

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if (fs.existsSync(imagePath)) {
                    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Base64
                    const imageBase64 = fs.readFileSync(imagePath).toString('base64');
                    const base64String = `data:image/${path.extname(image.fileName).slice(1)};base64,${imageBase64}`;

                    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã
                    const searchPattern = `{src:"./${image.fileName}", id:"${image.id}"}`;
                    const replacePattern = `{type:"image", src:"${base64String}", id:"${image.id}"}`;

                    // –ó–∞–º–µ–Ω–∞ –≤ HTML
                    htmlContent = htmlContent.replace(searchPattern, replacePattern);
                    logCompressionToSheet(1, "toBase64");
                } else {
                    console.warn(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${image.fileName} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–ø–∫–µ ${folderPath}`);
                }
            });

            // –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ index.html
            fs.writeFileSync(htmlFilePath, htmlContent, 'utf8');
            processedCount++;

            if (processedCount === folderPaths.length) {
                callback("–ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ Base64 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            }
        });
    });
}

function getLastTwoDirectories(fullPath) {
    const parts = fullPath.split(path.sep); // –†–∞–∑–¥–µ–ª—è–µ–º –ø—É—Ç—å –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é (Windows –∏–ª–∏ Unix)
    return parts.slice(-2).join(path.sep); // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
}

module.exports = {
    archiveSelectedItems,
    searchInFiles,
    compressImages,
    minifyJSFiles,
    replaceImagesWithBase64,
};
